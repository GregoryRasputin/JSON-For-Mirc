<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>JSON For mIRC</title>
        <link href='https://fonts.googleapis.com/css?family=Open+Sans|Lora:700' rel='stylesheet' type='text/css'>
        <link rel="stylesheet" type="text/css" href="../styles/main.css">
    </head>
    <body>
        <div class="wrapper">
            <div class="flex">
                <div class="wrapmenu">
                    <div class="menu">
                        Nav Menu to come
                    </div>
                </div>
                <div class="wrapcontent">
                    <div class="content">
                        <h1>
                            What is JSON?
                        </h1>
                        <p>
                            JSON is short for "JavaScript Object Notation"; originally meant for web applications, it has become the go-to data format for many enviornments and platforms. Its structuring makes for small, text-based, outputs that are easily parsable programmatically while still being human legiable.<br>
                            <br>
                            JSON is <em>NOT</em> a functional data notation. JSON data does not have a means to specify directives(commands) a program must do when attempting to understand the JSON data; the JSON standard strictly prohibits such as a means of ensuring security.
                        </p>
                        <br>
                        <br>
                        <h2>
                            Whitespace
                        </h2>
                        <p>
                            Previously it was mentioned that JSON is human readable yet most web api's return it as a jumbled mess. This is because JSON intrepreters are required to ignore whitespace so it can be removed without costing data integrity; this is what those APIs do with the intent of reducing network traffic. There are <a href="http://jsonviewer.stack.hu/" target="_blank">online tools</a> that will re-add whitespace to make the output human readable.
                        </p>
                        <br>
                        <br>
                        <h2>
                            Data Types
                        </h2>
                        <p>
                            Data Types are a way to indicate to the intrepreting program what each piece of the data is. JSON has 2 Data Types, 4 of which are used to represent simple values and 2 for containing data collections.
                        </p>
                        <br>
                        <div class="sub">
                            <h3>
                                Primitives
                            </h3>
                            <p>
                                JSON has four primitive data types to represent simple values. These data types do not have complexity or structuring the way Container Types do.
                            <p>
                            <div class="sub">
                                <span class="code em">Null</span> - Denoted by the keyword <span class="code">null</span><br>
                                <div class="sub">
                                    Null is used when there is absolutely no value to reference. That is, the value isn't empty text or 0 or false; there is absolutely nothing to reference.
                                </div>
                            </div>
                            <div class="sub">
                                <span class="code em">Boolean</span> - Denoted by the keywords <span class="code">true</span> and <span class="code">false</span><br>
                                <div class="sub">
                                    Boolean is used when a value is meant to only have two states. Its used to say "yes", "true", "no", "false" <i>etc</i>.
                                </div>
                            </div>
                            <div class="sub">
                                <span class="code em">Number</span> - Denoted by a valid numerical sequence<br>
                                <div class="sub">
                                    Number is used when a value should be intrepreted as a number; Positive numbers, negitive numbers and decimals are all Number data types.
                                </div>
                            </div>
                            <div class="sub">
                                <span class="code em">String</span> - Denoted by text wrapped in double quotes: <span class="code">""</span><br>
                                <div class="sub">
                                    String is used when a value, regardless of its contents should be intrepreted as plain text.
                                </div>
                            </div>
                        </div>
                        <br>
                        <div class="sub">
                            <h3>
                                Containers
                            </h3>
                            <p>
                                Containers, as their name implies, are used to contain multiple values and can point to both Primitive and Container values.
                            </p>
                            <div class="sub">
                                <span class="code em">Arrays</span> - Denoted by a comma seperated list of values being in brackets: <span class="code">[]</span><br>
                                <div class="sub">
                                    Arrays are ordered lists of values where each value is automatically given an index for referencing. Indexes start at zero and increase by one for each value: the first value uses an index of 0, the second an index of 1, the third an index of 2 and so on for each value in the array.
                                    <br>
                                    <br>
                                    Example: <span class="code">["a", 1, true, null, ["b", "c"]]</span>
                                </div>
                            </div>
                            <div class="sub">
                                <span class="code em">Objects</span> - Donated by a comma seperated list of key-value pairs wrapped in braces: <span class="code">{}</span><br>
                                <div class="sub">
                                    Objects are unordered lists where each value contained is referenced by a given key. All keys are represented as a <span class="code">String</span> and are seperated from their value via the use of a colon(<span class="code">:</span>). Keys are case sensitive so attempting to reference "KEY" will not point to the data contained under "key"
                                    <br>
                                    <br>
                                    Example: <span class="code">{"key": "value", "key2": true, "key3": [null, "c"]}</span>
                                    
                                </div>
                            </div>
                        </div>
                        <br>
                        <br>
                        <h2>
                            Special Characters
                        </h2>
                        <p>
                            Due to <span class="code">Strings</span> being able to contain any text there are special character sequences that have meaning within the context of a string.
                        </p>
                        <br>
                        <div class="sub">
                            I gots sum 'splaining to do
                        </div>
                        <br>
                        <br>
                        <h2>
                            Referencing
                        </h2>
                        <p>
                            Referencing specific parts of JSON data is quite simple once you understand the above
                        </p>
                        <br>
                        <div class="sub">
                            In the following examples, lines prefixed with <span class="code"><span class="comment">;;</span></span> are comments, and <span class="code">-&gt;</span> represents referencing an item of a container
<pre class="code">
<span class="comment">;; references 'item' of 'container'</span>
container -&gt; item
</pre>
                        </div>
                        <br>
                        <div class="sub">
                            <h3>
                                Primitive Values
                            </h3>
                            <p>
                                If the JSON data is a simple Primitive value it is simply returned by the intrepreter.
                            </p>
                            <div class="sub">
<pre class="code">
data = Intrprete_JSON("Value")

<span class="comment">;; This would output: value</span>
output(data);
</pre>
                            </div>
                        </div>
                        <br>
                        <div class="sub">
                            <h3>
                                Containers
                            </h3>
                            <p>
                                If the JSON data is a container, there's a bit more work involved to access values. A key or index must be specified when accessing the container and successive keys and indexes will need to be specified for nested containers.
                            </p>
                            <br>
                            <div class="sub">
                                Example:<br>
<pre class="code">
data = {
    "key1": "value",
    "key2": [
        "index0",
        "index1"
    ],
    "key3": {
        "key3.1": "value2"
    },
    "key4": {
        "key4.1": [
            "value3"
        ]
    }
}

Parsed_Data = Parse_JSON(data)

<span class="comment">;; Results in myVar being set to the text: value</span>
myVar = Parsed_Data -&gt; "key1"

<span class="comment">;; Results in myVar being set to the text: index0</span>
<span class="comment">;; First, key2's value is referenced(which is a container) then the 0th indexed item is referenced</span>
myVar = Parsed_Data -&gt; "key2" -&gt; 0

<span class="comment">;; Results in myVar being set to the text: index1</span>
myVar = Parsed_Data -&gt; "key2" -&gt; 1


<span class="comment">;; Results in myVar being set to the text: value2</span>
<span class="comment">;; First, key3's value is referenced(which is a container) then the item with key "key3.1" is referenced</span>
myVar = Parsed_Data -&gt; "key3" -&gt; "key3.1"

<span class="comment">;; Results in myVar being set to the text: value3</span>
<span class="comment">;; First, key4's value is referenced(which is a container) then the value of key4.1 is referenced(another container), then the 0th indexed item is referenced.</span>
myVar = Parsed_Data -> "key4" -> "key4.1" -> 0
</pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="wrapfoot">
                <div class="foot">Footer</div>
            </div>
        </div>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <script src="../scripts/main.js"></script>
    </body>
</html>